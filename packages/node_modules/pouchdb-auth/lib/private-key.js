var fs = require('fs');
var Promise = require('pouchdb-promise');
// var loadConfig = require('load-config-file');
// var yaml  = require('js-yaml');
var path  = require('path');
var openpgp = require('openpgp');

var utils = require('./utils');

var CFGNAME = 'private_key';
var SECTION = 'pouchdb_server';

// loadConfig.register(['.yaml', '.yml'], yaml.safeLoad); //first search.
// loadConfig.register('.json', JSON.parse); //third search.
// loadConfig.register('.txt', function(v){return v});

// function saveKey(aKey, aPath) {
//   return new Promise(function(resolve, reject){
//     fs.writeFile(aPath, aKey, function(err){
//       if (err) return reject(err);
//       else resolve(aKey);
//     })
//   });
// }

function saveKey(aConfig, aKey) {
  if (aConfig) {
    return new Promise(function(resolve, reject){
      aConfig.set(SECTION, CFGNAME, aKey, function(err){
        if (err) return reject(err);
        else return resolve(aKey);
      });
    });
  } else {
    return Promise.resolve(aKey);
  }
}

function generate() {
  var opts = {
    userIds: [{ name:'default', email:'master@lovhom.net' }],
    curve: "ed25519"
    // passphrase: 'super long and hard to guess secret'         // protects the private key
  };
  return openpgp.generateKey(opts).then(function(key){return key.privateKeyArmored});
}

module.exports = function load(aConfig) {
  var result;
  if (aConfig) result = aConfig.get(SECTION, CFGNAME);
  if (!utils.isPgpKey(result)) {
    result = generate().then(function(aKey){return saveKey(aConfig, aKey)});
  }
  return Promise.resolve(result).then(function(r){
    module.exports.keys = openpgp.key.readArmored(r).keys;
    return r;
  });
}
module.exports.generate = generate;

module.exports.verify = function (options){
  //the message should be a decrypted plain text or a clear text package.
  if (typeof options.message === 'string') {
    options.message = openpgp.message.readArmored(options.message);
  } else if (!(options.message instanceof openpgp.message.Message)){
    throw new Error('OpenPGP verfiy message format error');
  }
  return openpgp.verify(options);
};

// module.exports = function load(aPath) {
//   if (!aPath) {
//     aPath = path.join('.', CFGNAME);
//   } else {
//     aPath = path.join(path.dirname(aPath), CFGNAME);
//   }
//   var result = loadConfig(aPath);
//   if (!utils.isPgpKey(result)) {
//     result = generate().then(function(aKey){return saveKey(aKey, aPath)});
//   }
//   return Promise.resolve(result).then(function(r){
//     module.exports.key = r;
//     return r;
//   });
// }

